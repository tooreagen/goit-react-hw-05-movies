{"version":3,"file":"static/js/779.8ced557a.chunk.js","mappings":"kLAEMA,EAAS,mCAAG,WAAOC,EAAMC,GAAb,+EACD,mCACTC,EAFU,uCAE4BF,EAF5B,oBACD,oCADC,OAGdC,GAAgB,IAGZE,EAAWC,EAAAA,EAAAA,IAAUF,GANX,SAQOC,EARP,0BAQiBE,KARjB,mBAQdC,aARc,kDAAH,wDAYf,K,sKCZaC,EAAcC,EAAAA,GAAAA,GAAH,6CAGXC,EAAcD,EAAAA,GAAAA,GAAH,6CAIXE,EAAgBF,EAAAA,GAAAA,EAAH,wF,SCsC1B,EA1CgB,WACd,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACFX,EAAI,gBAAYW,EAAZ,YACV,GAAoCE,EAAAA,EAAAA,UAAS,MAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,mGAEtBF,EAFsB,UAEJlB,EAAAA,EAAAA,GAAUC,GAFN,mBAEaM,aAAac,SAF1B,8DAItBL,EAAc,EAAD,IAJS,yDAAH,qDAQvBI,GACD,GAAE,CAACnB,KAEJkB,EAAAA,EAAAA,YAAU,WACRG,QAAQC,IAAIR,EACb,GAAE,CAACA,KAGF,8BACGE,EAAQO,QACP,SAAChB,EAAD,UACGS,EAAQQ,KAAI,SAAAC,GACX,OACE,UAAChB,EAAD,YACE,UAACC,EAAD,sBAAwBe,EAAKC,WAC7B,uBAAID,EAAKE,YAFOF,EAAKG,GAK1B,OAGH,qEAIP,C","sources":["api/getMovies.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst getMovies = async (path, query) => {\n  const apiKEY = '427820c7b2f29f232bc908a76595fbeb';\n  const URL = `https://api.themoviedb.org/3/${path}?api_key=${apiKEY}${\n    query ? query : ''\n  }`;\n\n  const response = axios.get(URL);\n  return {\n    moviesObject: (await response).data,\n  };\n};\n\nexport default getMovies;\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  margin-top: 20px;\n`;\nexport const ReviewsItem = styled.li`\n  margin-top: 20px;\n`;\n\nexport const ReviewsAuthor = styled.p`\n  margin-bottom: 3px;\n  font-weight: 500;\n  font-size: 18px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport getMovies from 'api/getMovies';\nimport { ReviewsList, ReviewsItem, ReviewsAuthor } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const path = `movie/${movieId}/reviews`;\n  const [fetchError, setFetchError] = useState(null);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviewsMovie = async () => {\n      try {\n        setReviews((await getMovies(path)).moviesObject.results);\n      } catch (error) {\n        setFetchError(error);\n      }\n    };\n\n    fetchReviewsMovie();\n  }, [path]);\n\n  useEffect(() => {\n    console.log(fetchError);\n  }, [fetchError]);\n\n  return (\n    <>\n      {reviews.length ? (\n        <ReviewsList>\n          {reviews.map(item => {\n            return (\n              <ReviewsItem key={item.id}>\n                <ReviewsAuthor>Author: {item.author}</ReviewsAuthor>\n                <p>{item.content}</p>\n              </ReviewsItem>\n            );\n          })}\n        </ReviewsList>\n      ) : (\n        <p>We don`t have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["getMovies","path","query","URL","response","axios","data","moviesObject","ReviewsList","styled","ReviewsItem","ReviewsAuthor","movieId","useParams","useState","fetchError","setFetchError","reviews","setReviews","useEffect","fetchReviewsMovie","results","console","log","length","map","item","author","content","id"],"sourceRoot":""}